### YamlMime:ManagedReference
items:
- uid: Repository.BookRepository
  commentId: T:Repository.BookRepository
  id: BookRepository
  parent: Repository
  children:
  - Repository.BookRepository.#ctor(Entities.ApplicationContext)
  - Repository.BookRepository.CountBooksAsync(Entities.RequestFeatures.BookParameters)
  - Repository.BookRepository.CreateBook(BooksManagementService.Models.Book)
  - Repository.BookRepository.DeleteBook(BooksManagementService.Models.Book)
  - Repository.BookRepository.GetAllBooksAsync(Entities.RequestFeatures.BookParameters,System.Boolean)
  - Repository.BookRepository.GetBookAsync(System.Int32,System.Boolean)
  - Repository.BookRepository.GetBookByISBNAsync(System.String,System.Boolean)
  langs:
  - csharp
  - vb
  name: BookRepository
  nameWithType: BookRepository
  fullName: Repository.BookRepository
  type: Class
  source:
    remote:
      path: BooksManagementService/Repository/BookRepository.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: BookRepository
    path: Repository/BookRepository.cs
    startLine: 9
  assemblies:
  - BooksManagementService
  namespace: Repository
  syntax:
    content: 'public class BookRepository : RepositoryBase<Book>, IRepositoryBase<Book>, IBookRepository'
    content.vb: Public Class BookRepository Inherits RepositoryBase(Of Book) Implements IRepositoryBase(Of Book), IBookRepository
  inheritance:
  - System.Object
  - Repository.RepositoryBase{BooksManagementService.Models.Book}
  implements:
  - Contracts.IRepositoryBase{BooksManagementService.Models.Book}
  - Contracts.IBookRepository
  inheritedMembers:
  - Repository.RepositoryBase{BooksManagementService.Models.Book}.RepositoryContext
  - Repository.RepositoryBase{BooksManagementService.Models.Book}.FindAll(System.Boolean)
  - Repository.RepositoryBase{BooksManagementService.Models.Book}.FindByCondition(System.Linq.Expressions.Expression{System.Func{BooksManagementService.Models.Book,System.Boolean}},System.Boolean)
  - Repository.RepositoryBase{BooksManagementService.Models.Book}.Create(BooksManagementService.Models.Book)
  - Repository.RepositoryBase{BooksManagementService.Models.Book}.Update(BooksManagementService.Models.Book)
  - Repository.RepositoryBase{BooksManagementService.Models.Book}.Delete(BooksManagementService.Models.Book)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Repository.BookRepository.#ctor(Entities.ApplicationContext)
  commentId: M:Repository.BookRepository.#ctor(Entities.ApplicationContext)
  id: '#ctor(Entities.ApplicationContext)'
  parent: Repository.BookRepository
  langs:
  - csharp
  - vb
  name: BookRepository(ApplicationContext)
  nameWithType: BookRepository.BookRepository(ApplicationContext)
  fullName: Repository.BookRepository.BookRepository(Entities.ApplicationContext)
  type: Constructor
  source:
    remote:
      path: BooksManagementService/Repository/BookRepository.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: .ctor
    path: Repository/BookRepository.cs
    startLine: 11
  assemblies:
  - BooksManagementService
  namespace: Repository
  syntax:
    content: public BookRepository(ApplicationContext repositoryContext)
    parameters:
    - id: repositoryContext
      type: Entities.ApplicationContext
    content.vb: Public Sub New(repositoryContext As ApplicationContext)
  overload: Repository.BookRepository.#ctor*
  nameWithType.vb: BookRepository.New(ApplicationContext)
  fullName.vb: Repository.BookRepository.New(Entities.ApplicationContext)
  name.vb: New(ApplicationContext)
- uid: Repository.BookRepository.GetAllBooksAsync(Entities.RequestFeatures.BookParameters,System.Boolean)
  commentId: M:Repository.BookRepository.GetAllBooksAsync(Entities.RequestFeatures.BookParameters,System.Boolean)
  id: GetAllBooksAsync(Entities.RequestFeatures.BookParameters,System.Boolean)
  parent: Repository.BookRepository
  langs:
  - csharp
  - vb
  name: GetAllBooksAsync(BookParameters, bool)
  nameWithType: BookRepository.GetAllBooksAsync(BookParameters, bool)
  fullName: Repository.BookRepository.GetAllBooksAsync(Entities.RequestFeatures.BookParameters, bool)
  type: Method
  source:
    remote:
      path: BooksManagementService/Repository/BookRepository.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: GetAllBooksAsync
    path: Repository/BookRepository.cs
    startLine: 16
  assemblies:
  - BooksManagementService
  namespace: Repository
  example: []
  syntax:
    content: public Task<IEnumerable<Book>> GetAllBooksAsync(BookParameters bookParameters, bool trackChanges)
    parameters:
    - id: bookParameters
      type: Entities.RequestFeatures.BookParameters
    - id: trackChanges
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{BooksManagementService.Models.Book}}
    content.vb: Public Function GetAllBooksAsync(bookParameters As BookParameters, trackChanges As Boolean) As Task(Of IEnumerable(Of Book))
  overload: Repository.BookRepository.GetAllBooksAsync*
  implements:
  - Contracts.IBookRepository.GetAllBooksAsync(Entities.RequestFeatures.BookParameters,System.Boolean)
  nameWithType.vb: BookRepository.GetAllBooksAsync(BookParameters, Boolean)
  fullName.vb: Repository.BookRepository.GetAllBooksAsync(Entities.RequestFeatures.BookParameters, Boolean)
  name.vb: GetAllBooksAsync(BookParameters, Boolean)
- uid: Repository.BookRepository.GetBookAsync(System.Int32,System.Boolean)
  commentId: M:Repository.BookRepository.GetBookAsync(System.Int32,System.Boolean)
  id: GetBookAsync(System.Int32,System.Boolean)
  parent: Repository.BookRepository
  langs:
  - csharp
  - vb
  name: GetBookAsync(int, bool)
  nameWithType: BookRepository.GetBookAsync(int, bool)
  fullName: Repository.BookRepository.GetBookAsync(int, bool)
  type: Method
  source:
    remote:
      path: BooksManagementService/Repository/BookRepository.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: GetBookAsync
    path: Repository/BookRepository.cs
    startLine: 30
  assemblies:
  - BooksManagementService
  namespace: Repository
  example: []
  syntax:
    content: public Task<Book> GetBookAsync(int bookId, bool trackChanges)
    parameters:
    - id: bookId
      type: System.Int32
    - id: trackChanges
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{BooksManagementService.Models.Book}
    content.vb: Public Function GetBookAsync(bookId As Integer, trackChanges As Boolean) As Task(Of Book)
  overload: Repository.BookRepository.GetBookAsync*
  implements:
  - Contracts.IBookRepository.GetBookAsync(System.Int32,System.Boolean)
  nameWithType.vb: BookRepository.GetBookAsync(Integer, Boolean)
  fullName.vb: Repository.BookRepository.GetBookAsync(Integer, Boolean)
  name.vb: GetBookAsync(Integer, Boolean)
- uid: Repository.BookRepository.GetBookByISBNAsync(System.String,System.Boolean)
  commentId: M:Repository.BookRepository.GetBookByISBNAsync(System.String,System.Boolean)
  id: GetBookByISBNAsync(System.String,System.Boolean)
  parent: Repository.BookRepository
  langs:
  - csharp
  - vb
  name: GetBookByISBNAsync(string, bool)
  nameWithType: BookRepository.GetBookByISBNAsync(string, bool)
  fullName: Repository.BookRepository.GetBookByISBNAsync(string, bool)
  type: Method
  source:
    remote:
      path: BooksManagementService/Repository/BookRepository.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: GetBookByISBNAsync
    path: Repository/BookRepository.cs
    startLine: 33
  assemblies:
  - BooksManagementService
  namespace: Repository
  example: []
  syntax:
    content: public Task<Book> GetBookByISBNAsync(string ISBN, bool trackChanges)
    parameters:
    - id: ISBN
      type: System.String
    - id: trackChanges
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{BooksManagementService.Models.Book}
    content.vb: Public Function GetBookByISBNAsync(ISBN As String, trackChanges As Boolean) As Task(Of Book)
  overload: Repository.BookRepository.GetBookByISBNAsync*
  implements:
  - Contracts.IBookRepository.GetBookByISBNAsync(System.String,System.Boolean)
  nameWithType.vb: BookRepository.GetBookByISBNAsync(String, Boolean)
  fullName.vb: Repository.BookRepository.GetBookByISBNAsync(String, Boolean)
  name.vb: GetBookByISBNAsync(String, Boolean)
- uid: Repository.BookRepository.CreateBook(BooksManagementService.Models.Book)
  commentId: M:Repository.BookRepository.CreateBook(BooksManagementService.Models.Book)
  id: CreateBook(BooksManagementService.Models.Book)
  parent: Repository.BookRepository
  langs:
  - csharp
  - vb
  name: CreateBook(Book)
  nameWithType: BookRepository.CreateBook(Book)
  fullName: Repository.BookRepository.CreateBook(BooksManagementService.Models.Book)
  type: Method
  source:
    remote:
      path: BooksManagementService/Repository/BookRepository.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: CreateBook
    path: Repository/BookRepository.cs
    startLine: 35
  assemblies:
  - BooksManagementService
  namespace: Repository
  example: []
  syntax:
    content: public void CreateBook(Book book)
    parameters:
    - id: book
      type: BooksManagementService.Models.Book
    content.vb: Public Sub CreateBook(book As Book)
  overload: Repository.BookRepository.CreateBook*
  implements:
  - Contracts.IBookRepository.CreateBook(BooksManagementService.Models.Book)
- uid: Repository.BookRepository.CountBooksAsync(Entities.RequestFeatures.BookParameters)
  commentId: M:Repository.BookRepository.CountBooksAsync(Entities.RequestFeatures.BookParameters)
  id: CountBooksAsync(Entities.RequestFeatures.BookParameters)
  parent: Repository.BookRepository
  langs:
  - csharp
  - vb
  name: CountBooksAsync(BookParameters)
  nameWithType: BookRepository.CountBooksAsync(BookParameters)
  fullName: Repository.BookRepository.CountBooksAsync(Entities.RequestFeatures.BookParameters)
  type: Method
  source:
    remote:
      path: BooksManagementService/Repository/BookRepository.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: CountBooksAsync
    path: Repository/BookRepository.cs
    startLine: 37
  assemblies:
  - BooksManagementService
  namespace: Repository
  example: []
  syntax:
    content: public Task<int> CountBooksAsync(BookParameters bookParameters)
    parameters:
    - id: bookParameters
      type: Entities.RequestFeatures.BookParameters
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Function CountBooksAsync(bookParameters As BookParameters) As Task(Of Integer)
  overload: Repository.BookRepository.CountBooksAsync*
  implements:
  - Contracts.IBookRepository.CountBooksAsync(Entities.RequestFeatures.BookParameters)
- uid: Repository.BookRepository.DeleteBook(BooksManagementService.Models.Book)
  commentId: M:Repository.BookRepository.DeleteBook(BooksManagementService.Models.Book)
  id: DeleteBook(BooksManagementService.Models.Book)
  parent: Repository.BookRepository
  langs:
  - csharp
  - vb
  name: DeleteBook(Book)
  nameWithType: BookRepository.DeleteBook(Book)
  fullName: Repository.BookRepository.DeleteBook(BooksManagementService.Models.Book)
  type: Method
  source:
    remote:
      path: BooksManagementService/Repository/BookRepository.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: DeleteBook
    path: Repository/BookRepository.cs
    startLine: 46
  assemblies:
  - BooksManagementService
  namespace: Repository
  example: []
  syntax:
    content: public void DeleteBook(Book book)
    parameters:
    - id: book
      type: BooksManagementService.Models.Book
    content.vb: Public Sub DeleteBook(book As Book)
  overload: Repository.BookRepository.DeleteBook*
  implements:
  - Contracts.IBookRepository.DeleteBook(BooksManagementService.Models.Book)
references:
- uid: Repository
  commentId: N:Repository
  href: Repository.html
  name: Repository
  nameWithType: Repository
  fullName: Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Repository.RepositoryBase{BooksManagementService.Models.Book}
  commentId: T:Repository.RepositoryBase{BooksManagementService.Models.Book}
  parent: Repository
  definition: Repository.RepositoryBase`1
  href: Repository.RepositoryBase-1.html
  name: RepositoryBase<Book>
  nameWithType: RepositoryBase<Book>
  fullName: Repository.RepositoryBase<BooksManagementService.Models.Book>
  nameWithType.vb: RepositoryBase(Of Book)
  fullName.vb: Repository.RepositoryBase(Of BooksManagementService.Models.Book)
  name.vb: RepositoryBase(Of Book)
  spec.csharp:
  - uid: Repository.RepositoryBase`1
    name: RepositoryBase
    href: Repository.RepositoryBase-1.html
  - name: <
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: '>'
  spec.vb:
  - uid: Repository.RepositoryBase`1
    name: RepositoryBase
    href: Repository.RepositoryBase-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
- uid: Contracts.IRepositoryBase{BooksManagementService.Models.Book}
  commentId: T:Contracts.IRepositoryBase{BooksManagementService.Models.Book}
  parent: Contracts
  definition: Contracts.IRepositoryBase`1
  href: Contracts.IRepositoryBase-1.html
  name: IRepositoryBase<Book>
  nameWithType: IRepositoryBase<Book>
  fullName: Contracts.IRepositoryBase<BooksManagementService.Models.Book>
  nameWithType.vb: IRepositoryBase(Of Book)
  fullName.vb: Contracts.IRepositoryBase(Of BooksManagementService.Models.Book)
  name.vb: IRepositoryBase(Of Book)
  spec.csharp:
  - uid: Contracts.IRepositoryBase`1
    name: IRepositoryBase
    href: Contracts.IRepositoryBase-1.html
  - name: <
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: '>'
  spec.vb:
  - uid: Contracts.IRepositoryBase`1
    name: IRepositoryBase
    href: Contracts.IRepositoryBase-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
- uid: Contracts.IBookRepository
  commentId: T:Contracts.IBookRepository
  parent: Contracts
  href: Contracts.IBookRepository.html
  name: IBookRepository
  nameWithType: IBookRepository
  fullName: Contracts.IBookRepository
- uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.RepositoryContext
  commentId: F:Repository.RepositoryBase{BooksManagementService.Models.Book}.RepositoryContext
  parent: Repository.RepositoryBase{BooksManagementService.Models.Book}
  definition: Repository.RepositoryBase`1.RepositoryContext
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_RepositoryContext
  name: RepositoryContext
  nameWithType: RepositoryBase<Book>.RepositoryContext
  fullName: Repository.RepositoryBase<BooksManagementService.Models.Book>.RepositoryContext
  nameWithType.vb: RepositoryBase(Of Book).RepositoryContext
  fullName.vb: Repository.RepositoryBase(Of BooksManagementService.Models.Book).RepositoryContext
- uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.FindAll(System.Boolean)
  commentId: M:Repository.RepositoryBase{BooksManagementService.Models.Book}.FindAll(System.Boolean)
  parent: Repository.RepositoryBase{BooksManagementService.Models.Book}
  definition: Repository.RepositoryBase`1.FindAll(System.Boolean)
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindAll_System_Boolean_
  name: FindAll(bool)
  nameWithType: RepositoryBase<Book>.FindAll(bool)
  fullName: Repository.RepositoryBase<BooksManagementService.Models.Book>.FindAll(bool)
  nameWithType.vb: RepositoryBase(Of Book).FindAll(Boolean)
  fullName.vb: Repository.RepositoryBase(Of BooksManagementService.Models.Book).FindAll(Boolean)
  name.vb: FindAll(Boolean)
  spec.csharp:
  - uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.FindAll(System.Boolean)
    name: FindAll
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindAll_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.FindAll(System.Boolean)
    name: FindAll
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindAll_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.FindByCondition(System.Linq.Expressions.Expression{System.Func{BooksManagementService.Models.Book,System.Boolean}},System.Boolean)
  commentId: M:Repository.RepositoryBase{BooksManagementService.Models.Book}.FindByCondition(System.Linq.Expressions.Expression{System.Func{BooksManagementService.Models.Book,System.Boolean}},System.Boolean)
  parent: Repository.RepositoryBase{BooksManagementService.Models.Book}
  definition: Repository.RepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindByCondition_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  name: FindByCondition(Expression<Func<Book, bool>>, bool)
  nameWithType: RepositoryBase<Book>.FindByCondition(Expression<Func<Book, bool>>, bool)
  fullName: Repository.RepositoryBase<BooksManagementService.Models.Book>.FindByCondition(System.Linq.Expressions.Expression<System.Func<BooksManagementService.Models.Book, bool>>, bool)
  nameWithType.vb: RepositoryBase(Of Book).FindByCondition(Expression(Of Func(Of Book, Boolean)), Boolean)
  fullName.vb: Repository.RepositoryBase(Of BooksManagementService.Models.Book).FindByCondition(System.Linq.Expressions.Expression(Of System.Func(Of BooksManagementService.Models.Book, Boolean)), Boolean)
  name.vb: FindByCondition(Expression(Of Func(Of Book, Boolean)), Boolean)
  spec.csharp:
  - uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.FindByCondition(System.Linq.Expressions.Expression{System.Func{BooksManagementService.Models.Book,System.Boolean}},System.Boolean)
    name: FindByCondition
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindByCondition_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.FindByCondition(System.Linq.Expressions.Expression{System.Func{BooksManagementService.Models.Book,System.Boolean}},System.Boolean)
    name: FindByCondition
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindByCondition_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.Create(BooksManagementService.Models.Book)
  commentId: M:Repository.RepositoryBase{BooksManagementService.Models.Book}.Create(BooksManagementService.Models.Book)
  parent: Repository.RepositoryBase{BooksManagementService.Models.Book}
  definition: Repository.RepositoryBase`1.Create(`0)
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Create__0_
  name: Create(Book)
  nameWithType: RepositoryBase<Book>.Create(Book)
  fullName: Repository.RepositoryBase<BooksManagementService.Models.Book>.Create(BooksManagementService.Models.Book)
  nameWithType.vb: RepositoryBase(Of Book).Create(Book)
  fullName.vb: Repository.RepositoryBase(Of BooksManagementService.Models.Book).Create(BooksManagementService.Models.Book)
  spec.csharp:
  - uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.Create(BooksManagementService.Models.Book)
    name: Create
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Create__0_
  - name: (
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
  spec.vb:
  - uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.Create(BooksManagementService.Models.Book)
    name: Create
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Create__0_
  - name: (
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
- uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.Update(BooksManagementService.Models.Book)
  commentId: M:Repository.RepositoryBase{BooksManagementService.Models.Book}.Update(BooksManagementService.Models.Book)
  parent: Repository.RepositoryBase{BooksManagementService.Models.Book}
  definition: Repository.RepositoryBase`1.Update(`0)
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Update__0_
  name: Update(Book)
  nameWithType: RepositoryBase<Book>.Update(Book)
  fullName: Repository.RepositoryBase<BooksManagementService.Models.Book>.Update(BooksManagementService.Models.Book)
  nameWithType.vb: RepositoryBase(Of Book).Update(Book)
  fullName.vb: Repository.RepositoryBase(Of BooksManagementService.Models.Book).Update(BooksManagementService.Models.Book)
  spec.csharp:
  - uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.Update(BooksManagementService.Models.Book)
    name: Update
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Update__0_
  - name: (
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
  spec.vb:
  - uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.Update(BooksManagementService.Models.Book)
    name: Update
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Update__0_
  - name: (
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
- uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.Delete(BooksManagementService.Models.Book)
  commentId: M:Repository.RepositoryBase{BooksManagementService.Models.Book}.Delete(BooksManagementService.Models.Book)
  parent: Repository.RepositoryBase{BooksManagementService.Models.Book}
  definition: Repository.RepositoryBase`1.Delete(`0)
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Delete__0_
  name: Delete(Book)
  nameWithType: RepositoryBase<Book>.Delete(Book)
  fullName: Repository.RepositoryBase<BooksManagementService.Models.Book>.Delete(BooksManagementService.Models.Book)
  nameWithType.vb: RepositoryBase(Of Book).Delete(Book)
  fullName.vb: Repository.RepositoryBase(Of BooksManagementService.Models.Book).Delete(BooksManagementService.Models.Book)
  spec.csharp:
  - uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.Delete(BooksManagementService.Models.Book)
    name: Delete
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Delete__0_
  - name: (
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
  spec.vb:
  - uid: Repository.RepositoryBase{BooksManagementService.Models.Book}.Delete(BooksManagementService.Models.Book)
    name: Delete
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Delete__0_
  - name: (
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Repository.RepositoryBase`1
  commentId: T:Repository.RepositoryBase`1
  href: Repository.RepositoryBase-1.html
  name: RepositoryBase<T>
  nameWithType: RepositoryBase<T>
  fullName: Repository.RepositoryBase<T>
  nameWithType.vb: RepositoryBase(Of T)
  fullName.vb: Repository.RepositoryBase(Of T)
  name.vb: RepositoryBase(Of T)
  spec.csharp:
  - uid: Repository.RepositoryBase`1
    name: RepositoryBase
    href: Repository.RepositoryBase-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Repository.RepositoryBase`1
    name: RepositoryBase
    href: Repository.RepositoryBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Contracts.IRepositoryBase`1
  commentId: T:Contracts.IRepositoryBase`1
  href: Contracts.IRepositoryBase-1.html
  name: IRepositoryBase<T>
  nameWithType: IRepositoryBase<T>
  fullName: Contracts.IRepositoryBase<T>
  nameWithType.vb: IRepositoryBase(Of T)
  fullName.vb: Contracts.IRepositoryBase(Of T)
  name.vb: IRepositoryBase(Of T)
  spec.csharp:
  - uid: Contracts.IRepositoryBase`1
    name: IRepositoryBase
    href: Contracts.IRepositoryBase-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Contracts.IRepositoryBase`1
    name: IRepositoryBase
    href: Contracts.IRepositoryBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Contracts
  commentId: N:Contracts
  href: Contracts.html
  name: Contracts
  nameWithType: Contracts
  fullName: Contracts
- uid: Repository.RepositoryBase`1.RepositoryContext
  commentId: F:Repository.RepositoryBase`1.RepositoryContext
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_RepositoryContext
  name: RepositoryContext
  nameWithType: RepositoryBase<T>.RepositoryContext
  fullName: Repository.RepositoryBase<T>.RepositoryContext
  nameWithType.vb: RepositoryBase(Of T).RepositoryContext
  fullName.vb: Repository.RepositoryBase(Of T).RepositoryContext
- uid: Repository.RepositoryBase`1.FindAll(System.Boolean)
  commentId: M:Repository.RepositoryBase`1.FindAll(System.Boolean)
  isExternal: true
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindAll_System_Boolean_
  name: FindAll(bool)
  nameWithType: RepositoryBase<T>.FindAll(bool)
  fullName: Repository.RepositoryBase<T>.FindAll(bool)
  nameWithType.vb: RepositoryBase(Of T).FindAll(Boolean)
  fullName.vb: Repository.RepositoryBase(Of T).FindAll(Boolean)
  name.vb: FindAll(Boolean)
  spec.csharp:
  - uid: Repository.RepositoryBase`1.FindAll(System.Boolean)
    name: FindAll
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindAll_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Repository.RepositoryBase`1.FindAll(System.Boolean)
    name: FindAll
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindAll_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Repository.RepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  commentId: M:Repository.RepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  isExternal: true
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindByCondition_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  name: FindByCondition(Expression<Func<T, bool>>, bool)
  nameWithType: RepositoryBase<T>.FindByCondition(Expression<Func<T, bool>>, bool)
  fullName: Repository.RepositoryBase<T>.FindByCondition(System.Linq.Expressions.Expression<System.Func<T, bool>>, bool)
  nameWithType.vb: RepositoryBase(Of T).FindByCondition(Expression(Of Func(Of T, Boolean)), Boolean)
  fullName.vb: Repository.RepositoryBase(Of T).FindByCondition(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), Boolean)
  name.vb: FindByCondition(Expression(Of Func(Of T, Boolean)), Boolean)
  spec.csharp:
  - uid: Repository.RepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: FindByCondition
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindByCondition_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Repository.RepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: FindByCondition
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindByCondition_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Repository.RepositoryBase`1.Create(`0)
  commentId: M:Repository.RepositoryBase`1.Create(`0)
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Create__0_
  name: Create(T)
  nameWithType: RepositoryBase<T>.Create(T)
  fullName: Repository.RepositoryBase<T>.Create(T)
  nameWithType.vb: RepositoryBase(Of T).Create(T)
  fullName.vb: Repository.RepositoryBase(Of T).Create(T)
  spec.csharp:
  - uid: Repository.RepositoryBase`1.Create(`0)
    name: Create
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Create__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Repository.RepositoryBase`1.Create(`0)
    name: Create
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Create__0_
  - name: (
  - name: T
  - name: )
- uid: Repository.RepositoryBase`1.Update(`0)
  commentId: M:Repository.RepositoryBase`1.Update(`0)
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Update__0_
  name: Update(T)
  nameWithType: RepositoryBase<T>.Update(T)
  fullName: Repository.RepositoryBase<T>.Update(T)
  nameWithType.vb: RepositoryBase(Of T).Update(T)
  fullName.vb: Repository.RepositoryBase(Of T).Update(T)
  spec.csharp:
  - uid: Repository.RepositoryBase`1.Update(`0)
    name: Update
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Update__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Repository.RepositoryBase`1.Update(`0)
    name: Update
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Update__0_
  - name: (
  - name: T
  - name: )
- uid: Repository.RepositoryBase`1.Delete(`0)
  commentId: M:Repository.RepositoryBase`1.Delete(`0)
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Delete__0_
  name: Delete(T)
  nameWithType: RepositoryBase<T>.Delete(T)
  fullName: Repository.RepositoryBase<T>.Delete(T)
  nameWithType.vb: RepositoryBase(Of T).Delete(T)
  fullName.vb: Repository.RepositoryBase(Of T).Delete(T)
  spec.csharp:
  - uid: Repository.RepositoryBase`1.Delete(`0)
    name: Delete
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Delete__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Repository.RepositoryBase`1.Delete(`0)
    name: Delete
    href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Delete__0_
  - name: (
  - name: T
  - name: )
- uid: Repository.BookRepository.#ctor*
  commentId: Overload:Repository.BookRepository.#ctor
  href: Repository.BookRepository.html#Repository_BookRepository__ctor_Entities_ApplicationContext_
  name: BookRepository
  nameWithType: BookRepository.BookRepository
  fullName: Repository.BookRepository.BookRepository
  nameWithType.vb: BookRepository.New
  fullName.vb: Repository.BookRepository.New
  name.vb: New
- uid: Entities.ApplicationContext
  commentId: T:Entities.ApplicationContext
  parent: Entities
  href: Entities.ApplicationContext.html
  name: ApplicationContext
  nameWithType: ApplicationContext
  fullName: Entities.ApplicationContext
- uid: Entities
  commentId: N:Entities
  href: Entities.html
  name: Entities
  nameWithType: Entities
  fullName: Entities
- uid: Repository.BookRepository.GetAllBooksAsync*
  commentId: Overload:Repository.BookRepository.GetAllBooksAsync
  href: Repository.BookRepository.html#Repository_BookRepository_GetAllBooksAsync_Entities_RequestFeatures_BookParameters_System_Boolean_
  name: GetAllBooksAsync
  nameWithType: BookRepository.GetAllBooksAsync
  fullName: Repository.BookRepository.GetAllBooksAsync
- uid: Contracts.IBookRepository.GetAllBooksAsync(Entities.RequestFeatures.BookParameters,System.Boolean)
  commentId: M:Contracts.IBookRepository.GetAllBooksAsync(Entities.RequestFeatures.BookParameters,System.Boolean)
  parent: Contracts.IBookRepository
  isExternal: true
  href: Contracts.IBookRepository.html#Contracts_IBookRepository_GetAllBooksAsync_Entities_RequestFeatures_BookParameters_System_Boolean_
  name: GetAllBooksAsync(BookParameters, bool)
  nameWithType: IBookRepository.GetAllBooksAsync(BookParameters, bool)
  fullName: Contracts.IBookRepository.GetAllBooksAsync(Entities.RequestFeatures.BookParameters, bool)
  nameWithType.vb: IBookRepository.GetAllBooksAsync(BookParameters, Boolean)
  fullName.vb: Contracts.IBookRepository.GetAllBooksAsync(Entities.RequestFeatures.BookParameters, Boolean)
  name.vb: GetAllBooksAsync(BookParameters, Boolean)
  spec.csharp:
  - uid: Contracts.IBookRepository.GetAllBooksAsync(Entities.RequestFeatures.BookParameters,System.Boolean)
    name: GetAllBooksAsync
    href: Contracts.IBookRepository.html#Contracts_IBookRepository_GetAllBooksAsync_Entities_RequestFeatures_BookParameters_System_Boolean_
  - name: (
  - uid: Entities.RequestFeatures.BookParameters
    name: BookParameters
    href: Entities.RequestFeatures.BookParameters.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Contracts.IBookRepository.GetAllBooksAsync(Entities.RequestFeatures.BookParameters,System.Boolean)
    name: GetAllBooksAsync
    href: Contracts.IBookRepository.html#Contracts_IBookRepository_GetAllBooksAsync_Entities_RequestFeatures_BookParameters_System_Boolean_
  - name: (
  - uid: Entities.RequestFeatures.BookParameters
    name: BookParameters
    href: Entities.RequestFeatures.BookParameters.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Entities.RequestFeatures.BookParameters
  commentId: T:Entities.RequestFeatures.BookParameters
  parent: Entities.RequestFeatures
  href: Entities.RequestFeatures.BookParameters.html
  name: BookParameters
  nameWithType: BookParameters
  fullName: Entities.RequestFeatures.BookParameters
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{BooksManagementService.Models.Book}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{BooksManagementService.Models.Book}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEnumerable<Book>>
  nameWithType: Task<IEnumerable<Book>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<BooksManagementService.Models.Book>>
  nameWithType.vb: Task(Of IEnumerable(Of Book))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of BooksManagementService.Models.Book))
  name.vb: Task(Of IEnumerable(Of Book))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
  - name: )
- uid: Entities.RequestFeatures
  commentId: N:Entities.RequestFeatures
  href: Entities.html
  name: Entities.RequestFeatures
  nameWithType: Entities.RequestFeatures
  fullName: Entities.RequestFeatures
  spec.csharp:
  - uid: Entities
    name: Entities
    href: Entities.html
  - name: .
  - uid: Entities.RequestFeatures
    name: RequestFeatures
    href: Entities.RequestFeatures.html
  spec.vb:
  - uid: Entities
    name: Entities
    href: Entities.html
  - name: .
  - uid: Entities.RequestFeatures
    name: RequestFeatures
    href: Entities.RequestFeatures.html
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Repository.BookRepository.GetBookAsync*
  commentId: Overload:Repository.BookRepository.GetBookAsync
  href: Repository.BookRepository.html#Repository_BookRepository_GetBookAsync_System_Int32_System_Boolean_
  name: GetBookAsync
  nameWithType: BookRepository.GetBookAsync
  fullName: Repository.BookRepository.GetBookAsync
- uid: Contracts.IBookRepository.GetBookAsync(System.Int32,System.Boolean)
  commentId: M:Contracts.IBookRepository.GetBookAsync(System.Int32,System.Boolean)
  parent: Contracts.IBookRepository
  isExternal: true
  href: Contracts.IBookRepository.html#Contracts_IBookRepository_GetBookAsync_System_Int32_System_Boolean_
  name: GetBookAsync(int, bool)
  nameWithType: IBookRepository.GetBookAsync(int, bool)
  fullName: Contracts.IBookRepository.GetBookAsync(int, bool)
  nameWithType.vb: IBookRepository.GetBookAsync(Integer, Boolean)
  fullName.vb: Contracts.IBookRepository.GetBookAsync(Integer, Boolean)
  name.vb: GetBookAsync(Integer, Boolean)
  spec.csharp:
  - uid: Contracts.IBookRepository.GetBookAsync(System.Int32,System.Boolean)
    name: GetBookAsync
    href: Contracts.IBookRepository.html#Contracts_IBookRepository_GetBookAsync_System_Int32_System_Boolean_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Contracts.IBookRepository.GetBookAsync(System.Int32,System.Boolean)
    name: GetBookAsync
    href: Contracts.IBookRepository.html#Contracts_IBookRepository_GetBookAsync_System_Int32_System_Boolean_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Threading.Tasks.Task{BooksManagementService.Models.Book}
  commentId: T:System.Threading.Tasks.Task{BooksManagementService.Models.Book}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Book>
  nameWithType: Task<Book>
  fullName: System.Threading.Tasks.Task<BooksManagementService.Models.Book>
  nameWithType.vb: Task(Of Book)
  fullName.vb: System.Threading.Tasks.Task(Of BooksManagementService.Models.Book)
  name.vb: Task(Of Book)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
- uid: Repository.BookRepository.GetBookByISBNAsync*
  commentId: Overload:Repository.BookRepository.GetBookByISBNAsync
  href: Repository.BookRepository.html#Repository_BookRepository_GetBookByISBNAsync_System_String_System_Boolean_
  name: GetBookByISBNAsync
  nameWithType: BookRepository.GetBookByISBNAsync
  fullName: Repository.BookRepository.GetBookByISBNAsync
- uid: Contracts.IBookRepository.GetBookByISBNAsync(System.String,System.Boolean)
  commentId: M:Contracts.IBookRepository.GetBookByISBNAsync(System.String,System.Boolean)
  parent: Contracts.IBookRepository
  isExternal: true
  href: Contracts.IBookRepository.html#Contracts_IBookRepository_GetBookByISBNAsync_System_String_System_Boolean_
  name: GetBookByISBNAsync(string, bool)
  nameWithType: IBookRepository.GetBookByISBNAsync(string, bool)
  fullName: Contracts.IBookRepository.GetBookByISBNAsync(string, bool)
  nameWithType.vb: IBookRepository.GetBookByISBNAsync(String, Boolean)
  fullName.vb: Contracts.IBookRepository.GetBookByISBNAsync(String, Boolean)
  name.vb: GetBookByISBNAsync(String, Boolean)
  spec.csharp:
  - uid: Contracts.IBookRepository.GetBookByISBNAsync(System.String,System.Boolean)
    name: GetBookByISBNAsync
    href: Contracts.IBookRepository.html#Contracts_IBookRepository_GetBookByISBNAsync_System_String_System_Boolean_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Contracts.IBookRepository.GetBookByISBNAsync(System.String,System.Boolean)
    name: GetBookByISBNAsync
    href: Contracts.IBookRepository.html#Contracts_IBookRepository_GetBookByISBNAsync_System_String_System_Boolean_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Repository.BookRepository.CreateBook*
  commentId: Overload:Repository.BookRepository.CreateBook
  href: Repository.BookRepository.html#Repository_BookRepository_CreateBook_BooksManagementService_Models_Book_
  name: CreateBook
  nameWithType: BookRepository.CreateBook
  fullName: Repository.BookRepository.CreateBook
- uid: Contracts.IBookRepository.CreateBook(BooksManagementService.Models.Book)
  commentId: M:Contracts.IBookRepository.CreateBook(BooksManagementService.Models.Book)
  parent: Contracts.IBookRepository
  href: Contracts.IBookRepository.html#Contracts_IBookRepository_CreateBook_BooksManagementService_Models_Book_
  name: CreateBook(Book)
  nameWithType: IBookRepository.CreateBook(Book)
  fullName: Contracts.IBookRepository.CreateBook(BooksManagementService.Models.Book)
  spec.csharp:
  - uid: Contracts.IBookRepository.CreateBook(BooksManagementService.Models.Book)
    name: CreateBook
    href: Contracts.IBookRepository.html#Contracts_IBookRepository_CreateBook_BooksManagementService_Models_Book_
  - name: (
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
  spec.vb:
  - uid: Contracts.IBookRepository.CreateBook(BooksManagementService.Models.Book)
    name: CreateBook
    href: Contracts.IBookRepository.html#Contracts_IBookRepository_CreateBook_BooksManagementService_Models_Book_
  - name: (
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
- uid: BooksManagementService.Models.Book
  commentId: T:BooksManagementService.Models.Book
  parent: BooksManagementService.Models
  href: BooksManagementService.Models.Book.html
  name: Book
  nameWithType: Book
  fullName: BooksManagementService.Models.Book
- uid: BooksManagementService.Models
  commentId: N:BooksManagementService.Models
  href: BooksManagementService.html
  name: BooksManagementService.Models
  nameWithType: BooksManagementService.Models
  fullName: BooksManagementService.Models
  spec.csharp:
  - uid: BooksManagementService
    name: BooksManagementService
    href: BooksManagementService.html
  - name: .
  - uid: BooksManagementService.Models
    name: Models
    href: BooksManagementService.Models.html
  spec.vb:
  - uid: BooksManagementService
    name: BooksManagementService
    href: BooksManagementService.html
  - name: .
  - uid: BooksManagementService.Models
    name: Models
    href: BooksManagementService.Models.html
- uid: Repository.BookRepository.CountBooksAsync*
  commentId: Overload:Repository.BookRepository.CountBooksAsync
  href: Repository.BookRepository.html#Repository_BookRepository_CountBooksAsync_Entities_RequestFeatures_BookParameters_
  name: CountBooksAsync
  nameWithType: BookRepository.CountBooksAsync
  fullName: Repository.BookRepository.CountBooksAsync
- uid: Contracts.IBookRepository.CountBooksAsync(Entities.RequestFeatures.BookParameters)
  commentId: M:Contracts.IBookRepository.CountBooksAsync(Entities.RequestFeatures.BookParameters)
  parent: Contracts.IBookRepository
  href: Contracts.IBookRepository.html#Contracts_IBookRepository_CountBooksAsync_Entities_RequestFeatures_BookParameters_
  name: CountBooksAsync(BookParameters)
  nameWithType: IBookRepository.CountBooksAsync(BookParameters)
  fullName: Contracts.IBookRepository.CountBooksAsync(Entities.RequestFeatures.BookParameters)
  spec.csharp:
  - uid: Contracts.IBookRepository.CountBooksAsync(Entities.RequestFeatures.BookParameters)
    name: CountBooksAsync
    href: Contracts.IBookRepository.html#Contracts_IBookRepository_CountBooksAsync_Entities_RequestFeatures_BookParameters_
  - name: (
  - uid: Entities.RequestFeatures.BookParameters
    name: BookParameters
    href: Entities.RequestFeatures.BookParameters.html
  - name: )
  spec.vb:
  - uid: Contracts.IBookRepository.CountBooksAsync(Entities.RequestFeatures.BookParameters)
    name: CountBooksAsync
    href: Contracts.IBookRepository.html#Contracts_IBookRepository_CountBooksAsync_Entities_RequestFeatures_BookParameters_
  - name: (
  - uid: Entities.RequestFeatures.BookParameters
    name: BookParameters
    href: Entities.RequestFeatures.BookParameters.html
  - name: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Repository.BookRepository.DeleteBook*
  commentId: Overload:Repository.BookRepository.DeleteBook
  href: Repository.BookRepository.html#Repository_BookRepository_DeleteBook_BooksManagementService_Models_Book_
  name: DeleteBook
  nameWithType: BookRepository.DeleteBook
  fullName: Repository.BookRepository.DeleteBook
- uid: Contracts.IBookRepository.DeleteBook(BooksManagementService.Models.Book)
  commentId: M:Contracts.IBookRepository.DeleteBook(BooksManagementService.Models.Book)
  parent: Contracts.IBookRepository
  href: Contracts.IBookRepository.html#Contracts_IBookRepository_DeleteBook_BooksManagementService_Models_Book_
  name: DeleteBook(Book)
  nameWithType: IBookRepository.DeleteBook(Book)
  fullName: Contracts.IBookRepository.DeleteBook(BooksManagementService.Models.Book)
  spec.csharp:
  - uid: Contracts.IBookRepository.DeleteBook(BooksManagementService.Models.Book)
    name: DeleteBook
    href: Contracts.IBookRepository.html#Contracts_IBookRepository_DeleteBook_BooksManagementService_Models_Book_
  - name: (
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
  spec.vb:
  - uid: Contracts.IBookRepository.DeleteBook(BooksManagementService.Models.Book)
    name: DeleteBook
    href: Contracts.IBookRepository.html#Contracts_IBookRepository_DeleteBook_BooksManagementService_Models_Book_
  - name: (
  - uid: BooksManagementService.Models.Book
    name: Book
    href: BooksManagementService.Models.Book.html
  - name: )
