### YamlMime:ManagedReference
items:
- uid: Repository.RepositoryBase`1
  commentId: T:Repository.RepositoryBase`1
  id: RepositoryBase`1
  parent: Repository
  children:
  - Repository.RepositoryBase`1.#ctor(Entities.ApplicationContext)
  - Repository.RepositoryBase`1.Create(`0)
  - Repository.RepositoryBase`1.Delete(`0)
  - Repository.RepositoryBase`1.FindAll(System.Boolean)
  - Repository.RepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  - Repository.RepositoryBase`1.RepositoryContext
  - Repository.RepositoryBase`1.Update(`0)
  langs:
  - csharp
  - vb
  name: RepositoryBase<T>
  nameWithType: RepositoryBase<T>
  fullName: Repository.RepositoryBase<T>
  type: Class
  source:
    remote:
      path: BooksManagementService/Repository/RepositoryBase.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: RepositoryBase
    path: Repository/RepositoryBase.cs
    startLine: 7
  assemblies:
  - BooksManagementService
  namespace: Repository
  syntax:
    content: 'public abstract class RepositoryBase<T> : IRepositoryBase<T> where T : class'
    typeParameters:
    - id: T
    content.vb: Public MustInherit Class RepositoryBase(Of T As Class) Implements IRepositoryBase(Of T)
  inheritance:
  - System.Object
  derivedClasses:
  - Repository.BookRepository
  implements:
  - Contracts.IRepositoryBase{{T}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: RepositoryBase(Of T)
  fullName.vb: Repository.RepositoryBase(Of T)
  name.vb: RepositoryBase(Of T)
- uid: Repository.RepositoryBase`1.RepositoryContext
  commentId: F:Repository.RepositoryBase`1.RepositoryContext
  id: RepositoryContext
  parent: Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: RepositoryContext
  nameWithType: RepositoryBase<T>.RepositoryContext
  fullName: Repository.RepositoryBase<T>.RepositoryContext
  type: Field
  source:
    remote:
      path: BooksManagementService/Repository/RepositoryBase.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: RepositoryContext
    path: Repository/RepositoryBase.cs
    startLine: 9
  assemblies:
  - BooksManagementService
  namespace: Repository
  syntax:
    content: protected ApplicationContext RepositoryContext
    return:
      type: Entities.ApplicationContext
    content.vb: Protected RepositoryContext As ApplicationContext
  nameWithType.vb: RepositoryBase(Of T).RepositoryContext
  fullName.vb: Repository.RepositoryBase(Of T).RepositoryContext
- uid: Repository.RepositoryBase`1.#ctor(Entities.ApplicationContext)
  commentId: M:Repository.RepositoryBase`1.#ctor(Entities.ApplicationContext)
  id: '#ctor(Entities.ApplicationContext)'
  parent: Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: RepositoryBase(ApplicationContext)
  nameWithType: RepositoryBase<T>.RepositoryBase(ApplicationContext)
  fullName: Repository.RepositoryBase<T>.RepositoryBase(Entities.ApplicationContext)
  type: Constructor
  source:
    remote:
      path: BooksManagementService/Repository/RepositoryBase.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: .ctor
    path: Repository/RepositoryBase.cs
    startLine: 10
  assemblies:
  - BooksManagementService
  namespace: Repository
  syntax:
    content: public RepositoryBase(ApplicationContext repositoryContext)
    parameters:
    - id: repositoryContext
      type: Entities.ApplicationContext
    content.vb: Public Sub New(repositoryContext As ApplicationContext)
  overload: Repository.RepositoryBase`1.#ctor*
  nameWithType.vb: RepositoryBase(Of T).New(ApplicationContext)
  fullName.vb: Repository.RepositoryBase(Of T).New(Entities.ApplicationContext)
  name.vb: New(ApplicationContext)
- uid: Repository.RepositoryBase`1.FindAll(System.Boolean)
  commentId: M:Repository.RepositoryBase`1.FindAll(System.Boolean)
  id: FindAll(System.Boolean)
  parent: Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: FindAll(bool)
  nameWithType: RepositoryBase<T>.FindAll(bool)
  fullName: Repository.RepositoryBase<T>.FindAll(bool)
  type: Method
  source:
    remote:
      path: BooksManagementService/Repository/RepositoryBase.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: FindAll
    path: Repository/RepositoryBase.cs
    startLine: 14
  assemblies:
  - BooksManagementService
  namespace: Repository
  example: []
  syntax:
    content: public IQueryable<T> FindAll(bool trackChanges)
    parameters:
    - id: trackChanges
      type: System.Boolean
    return:
      type: System.Linq.IQueryable{{T}}
    content.vb: Public Function FindAll(trackChanges As Boolean) As IQueryable(Of T)
  overload: Repository.RepositoryBase`1.FindAll*
  implements:
  - Contracts.IRepositoryBase{{T}}.FindAll(System.Boolean)
  nameWithType.vb: RepositoryBase(Of T).FindAll(Boolean)
  fullName.vb: Repository.RepositoryBase(Of T).FindAll(Boolean)
  name.vb: FindAll(Boolean)
- uid: Repository.RepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  commentId: M:Repository.RepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  id: FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  parent: Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: FindByCondition(Expression<Func<T, bool>>, bool)
  nameWithType: RepositoryBase<T>.FindByCondition(Expression<Func<T, bool>>, bool)
  fullName: Repository.RepositoryBase<T>.FindByCondition(System.Linq.Expressions.Expression<System.Func<T, bool>>, bool)
  type: Method
  source:
    remote:
      path: BooksManagementService/Repository/RepositoryBase.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: FindByCondition
    path: Repository/RepositoryBase.cs
    startLine: 19
  assemblies:
  - BooksManagementService
  namespace: Repository
  example: []
  syntax:
    content: public IQueryable<T> FindByCondition(Expression<Func<T, bool>> expression, bool trackChanges)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: trackChanges
      type: System.Boolean
    return:
      type: System.Linq.IQueryable{{T}}
    content.vb: Public Function FindByCondition(expression As Expression(Of Func(Of T, Boolean)), trackChanges As Boolean) As IQueryable(Of T)
  overload: Repository.RepositoryBase`1.FindByCondition*
  implements:
  - Contracts.IRepositoryBase{{T}}.FindByCondition(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Boolean)
  nameWithType.vb: RepositoryBase(Of T).FindByCondition(Expression(Of Func(Of T, Boolean)), Boolean)
  fullName.vb: Repository.RepositoryBase(Of T).FindByCondition(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), Boolean)
  name.vb: FindByCondition(Expression(Of Func(Of T, Boolean)), Boolean)
- uid: Repository.RepositoryBase`1.Create(`0)
  commentId: M:Repository.RepositoryBase`1.Create(`0)
  id: Create(`0)
  parent: Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Create(T)
  nameWithType: RepositoryBase<T>.Create(T)
  fullName: Repository.RepositoryBase<T>.Create(T)
  type: Method
  source:
    remote:
      path: BooksManagementService/Repository/RepositoryBase.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: Create
    path: Repository/RepositoryBase.cs
    startLine: 27
  assemblies:
  - BooksManagementService
  namespace: Repository
  example: []
  syntax:
    content: public void Create(T entity)
    parameters:
    - id: entity
      type: '{T}'
    content.vb: Public Sub Create(entity As T)
  overload: Repository.RepositoryBase`1.Create*
  implements:
  - Contracts.IRepositoryBase{{T}}.Create({T})
  nameWithType.vb: RepositoryBase(Of T).Create(T)
  fullName.vb: Repository.RepositoryBase(Of T).Create(T)
- uid: Repository.RepositoryBase`1.Update(`0)
  commentId: M:Repository.RepositoryBase`1.Update(`0)
  id: Update(`0)
  parent: Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Update(T)
  nameWithType: RepositoryBase<T>.Update(T)
  fullName: Repository.RepositoryBase<T>.Update(T)
  type: Method
  source:
    remote:
      path: BooksManagementService/Repository/RepositoryBase.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: Update
    path: Repository/RepositoryBase.cs
    startLine: 28
  assemblies:
  - BooksManagementService
  namespace: Repository
  example: []
  syntax:
    content: public void Update(T entity)
    parameters:
    - id: entity
      type: '{T}'
    content.vb: Public Sub Update(entity As T)
  overload: Repository.RepositoryBase`1.Update*
  implements:
  - Contracts.IRepositoryBase{{T}}.Update({T})
  nameWithType.vb: RepositoryBase(Of T).Update(T)
  fullName.vb: Repository.RepositoryBase(Of T).Update(T)
- uid: Repository.RepositoryBase`1.Delete(`0)
  commentId: M:Repository.RepositoryBase`1.Delete(`0)
  id: Delete(`0)
  parent: Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Delete(T)
  nameWithType: RepositoryBase<T>.Delete(T)
  fullName: Repository.RepositoryBase<T>.Delete(T)
  type: Method
  source:
    remote:
      path: BooksManagementService/Repository/RepositoryBase.cs
      branch: master
      repo: https://github.com/EvgenSavenok/Lib_with_microservices.git
    id: Delete
    path: Repository/RepositoryBase.cs
    startLine: 29
  assemblies:
  - BooksManagementService
  namespace: Repository
  example: []
  syntax:
    content: public void Delete(T entity)
    parameters:
    - id: entity
      type: '{T}'
    content.vb: Public Sub Delete(entity As T)
  overload: Repository.RepositoryBase`1.Delete*
  implements:
  - Contracts.IRepositoryBase{{T}}.Delete({T})
  nameWithType.vb: RepositoryBase(Of T).Delete(T)
  fullName.vb: Repository.RepositoryBase(Of T).Delete(T)
references:
- uid: Repository
  commentId: N:Repository
  href: Repository.html
  name: Repository
  nameWithType: Repository
  fullName: Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Contracts.IRepositoryBase{{T}}
  commentId: T:Contracts.IRepositoryBase{`0}
  parent: Contracts
  definition: Contracts.IRepositoryBase`1
  href: Contracts.IRepositoryBase-1.html
  name: IRepositoryBase<T>
  nameWithType: IRepositoryBase<T>
  fullName: Contracts.IRepositoryBase<T>
  nameWithType.vb: IRepositoryBase(Of T)
  fullName.vb: Contracts.IRepositoryBase(Of T)
  name.vb: IRepositoryBase(Of T)
  spec.csharp:
  - uid: Contracts.IRepositoryBase`1
    name: IRepositoryBase
    href: Contracts.IRepositoryBase-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Contracts.IRepositoryBase`1
    name: IRepositoryBase
    href: Contracts.IRepositoryBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Contracts.IRepositoryBase`1
  commentId: T:Contracts.IRepositoryBase`1
  href: Contracts.IRepositoryBase-1.html
  name: IRepositoryBase<T>
  nameWithType: IRepositoryBase<T>
  fullName: Contracts.IRepositoryBase<T>
  nameWithType.vb: IRepositoryBase(Of T)
  fullName.vb: Contracts.IRepositoryBase(Of T)
  name.vb: IRepositoryBase(Of T)
  spec.csharp:
  - uid: Contracts.IRepositoryBase`1
    name: IRepositoryBase
    href: Contracts.IRepositoryBase-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Contracts.IRepositoryBase`1
    name: IRepositoryBase
    href: Contracts.IRepositoryBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Contracts
  commentId: N:Contracts
  href: Contracts.html
  name: Contracts
  nameWithType: Contracts
  fullName: Contracts
- uid: Entities.ApplicationContext
  commentId: T:Entities.ApplicationContext
  parent: Entities
  href: Entities.ApplicationContext.html
  name: ApplicationContext
  nameWithType: ApplicationContext
  fullName: Entities.ApplicationContext
- uid: Entities
  commentId: N:Entities
  href: Entities.html
  name: Entities
  nameWithType: Entities
  fullName: Entities
- uid: Repository.RepositoryBase`1.#ctor*
  commentId: Overload:Repository.RepositoryBase`1.#ctor
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1__ctor_Entities_ApplicationContext_
  name: RepositoryBase
  nameWithType: RepositoryBase<T>.RepositoryBase
  fullName: Repository.RepositoryBase<T>.RepositoryBase
  nameWithType.vb: RepositoryBase(Of T).New
  fullName.vb: Repository.RepositoryBase(Of T).New
  name.vb: New
- uid: Repository.RepositoryBase`1.FindAll*
  commentId: Overload:Repository.RepositoryBase`1.FindAll
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindAll_System_Boolean_
  name: FindAll
  nameWithType: RepositoryBase<T>.FindAll
  fullName: Repository.RepositoryBase<T>.FindAll
  nameWithType.vb: RepositoryBase(Of T).FindAll
  fullName.vb: Repository.RepositoryBase(Of T).FindAll
- uid: Contracts.IRepositoryBase{{T}}.FindAll(System.Boolean)
  commentId: M:Contracts.IRepositoryBase{`0}.FindAll(System.Boolean)
  parent: Contracts.IRepositoryBase{{T}}
  definition: Contracts.IRepositoryBase`1.FindAll(System.Boolean)
  href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_FindAll_System_Boolean_
  name: FindAll(bool)
  nameWithType: IRepositoryBase<T>.FindAll(bool)
  fullName: Contracts.IRepositoryBase<T>.FindAll(bool)
  nameWithType.vb: IRepositoryBase(Of T).FindAll(Boolean)
  fullName.vb: Contracts.IRepositoryBase(Of T).FindAll(Boolean)
  name.vb: FindAll(Boolean)
  spec.csharp:
  - uid: Contracts.IRepositoryBase{`0}.FindAll(System.Boolean)
    name: FindAll
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_FindAll_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Contracts.IRepositoryBase{`0}.FindAll(System.Boolean)
    name: FindAll
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_FindAll_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Linq.IQueryable{{T}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Contracts.IRepositoryBase`1.FindAll(System.Boolean)
  commentId: M:Contracts.IRepositoryBase`1.FindAll(System.Boolean)
  isExternal: true
  href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_FindAll_System_Boolean_
  name: FindAll(bool)
  nameWithType: IRepositoryBase<T>.FindAll(bool)
  fullName: Contracts.IRepositoryBase<T>.FindAll(bool)
  nameWithType.vb: IRepositoryBase(Of T).FindAll(Boolean)
  fullName.vb: Contracts.IRepositoryBase(Of T).FindAll(Boolean)
  name.vb: FindAll(Boolean)
  spec.csharp:
  - uid: Contracts.IRepositoryBase`1.FindAll(System.Boolean)
    name: FindAll
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_FindAll_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Contracts.IRepositoryBase`1.FindAll(System.Boolean)
    name: FindAll
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_FindAll_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
- uid: Repository.RepositoryBase`1.FindByCondition*
  commentId: Overload:Repository.RepositoryBase`1.FindByCondition
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_FindByCondition_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  name: FindByCondition
  nameWithType: RepositoryBase<T>.FindByCondition
  fullName: Repository.RepositoryBase<T>.FindByCondition
  nameWithType.vb: RepositoryBase(Of T).FindByCondition
  fullName.vb: Repository.RepositoryBase(Of T).FindByCondition
- uid: Contracts.IRepositoryBase{{T}}.FindByCondition(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Boolean)
  commentId: M:Contracts.IRepositoryBase{`0}.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  parent: Contracts.IRepositoryBase{{T}}
  definition: Contracts.IRepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_FindByCondition_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  name: FindByCondition(Expression<Func<T, bool>>, bool)
  nameWithType: IRepositoryBase<T>.FindByCondition(Expression<Func<T, bool>>, bool)
  fullName: Contracts.IRepositoryBase<T>.FindByCondition(System.Linq.Expressions.Expression<System.Func<T, bool>>, bool)
  nameWithType.vb: IRepositoryBase(Of T).FindByCondition(Expression(Of Func(Of T, Boolean)), Boolean)
  fullName.vb: Contracts.IRepositoryBase(Of T).FindByCondition(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), Boolean)
  name.vb: FindByCondition(Expression(Of Func(Of T, Boolean)), Boolean)
  spec.csharp:
  - uid: Contracts.IRepositoryBase{`0}.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: FindByCondition
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_FindByCondition_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Contracts.IRepositoryBase{`0}.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: FindByCondition
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_FindByCondition_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T, bool>>
  nameWithType: Expression<Func<T, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, bool>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: Contracts.IRepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  commentId: M:Contracts.IRepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  isExternal: true
  href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_FindByCondition_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  name: FindByCondition(Expression<Func<T, bool>>, bool)
  nameWithType: IRepositoryBase<T>.FindByCondition(Expression<Func<T, bool>>, bool)
  fullName: Contracts.IRepositoryBase<T>.FindByCondition(System.Linq.Expressions.Expression<System.Func<T, bool>>, bool)
  nameWithType.vb: IRepositoryBase(Of T).FindByCondition(Expression(Of Func(Of T, Boolean)), Boolean)
  fullName.vb: Contracts.IRepositoryBase(Of T).FindByCondition(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), Boolean)
  name.vb: FindByCondition(Expression(Of Func(Of T, Boolean)), Boolean)
  spec.csharp:
  - uid: Contracts.IRepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: FindByCondition
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_FindByCondition_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Contracts.IRepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: FindByCondition
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_FindByCondition_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: Repository.RepositoryBase`1.Create*
  commentId: Overload:Repository.RepositoryBase`1.Create
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Create__0_
  name: Create
  nameWithType: RepositoryBase<T>.Create
  fullName: Repository.RepositoryBase<T>.Create
  nameWithType.vb: RepositoryBase(Of T).Create
  fullName.vb: Repository.RepositoryBase(Of T).Create
- uid: Contracts.IRepositoryBase{{T}}.Create({T})
  commentId: M:Contracts.IRepositoryBase{`0}.Create(`0)
  parent: Contracts.IRepositoryBase{{T}}
  definition: Contracts.IRepositoryBase`1.Create(`0)
  href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Create__0_
  name: Create(T)
  nameWithType: IRepositoryBase<T>.Create(T)
  fullName: Contracts.IRepositoryBase<T>.Create(T)
  nameWithType.vb: IRepositoryBase(Of T).Create(T)
  fullName.vb: Contracts.IRepositoryBase(Of T).Create(T)
  spec.csharp:
  - uid: Contracts.IRepositoryBase{`0}.Create(`0)
    name: Create
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Create__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Contracts.IRepositoryBase{`0}.Create(`0)
    name: Create
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Create__0_
  - name: (
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Contracts.IRepositoryBase`1.Create(`0)
  commentId: M:Contracts.IRepositoryBase`1.Create(`0)
  href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Create__0_
  name: Create(T)
  nameWithType: IRepositoryBase<T>.Create(T)
  fullName: Contracts.IRepositoryBase<T>.Create(T)
  nameWithType.vb: IRepositoryBase(Of T).Create(T)
  fullName.vb: Contracts.IRepositoryBase(Of T).Create(T)
  spec.csharp:
  - uid: Contracts.IRepositoryBase`1.Create(`0)
    name: Create
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Create__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Contracts.IRepositoryBase`1.Create(`0)
    name: Create
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Create__0_
  - name: (
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Repository.RepositoryBase`1.Update*
  commentId: Overload:Repository.RepositoryBase`1.Update
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Update__0_
  name: Update
  nameWithType: RepositoryBase<T>.Update
  fullName: Repository.RepositoryBase<T>.Update
  nameWithType.vb: RepositoryBase(Of T).Update
  fullName.vb: Repository.RepositoryBase(Of T).Update
- uid: Contracts.IRepositoryBase{{T}}.Update({T})
  commentId: M:Contracts.IRepositoryBase{`0}.Update(`0)
  parent: Contracts.IRepositoryBase{{T}}
  definition: Contracts.IRepositoryBase`1.Update(`0)
  href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Update__0_
  name: Update(T)
  nameWithType: IRepositoryBase<T>.Update(T)
  fullName: Contracts.IRepositoryBase<T>.Update(T)
  nameWithType.vb: IRepositoryBase(Of T).Update(T)
  fullName.vb: Contracts.IRepositoryBase(Of T).Update(T)
  spec.csharp:
  - uid: Contracts.IRepositoryBase{`0}.Update(`0)
    name: Update
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Update__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Contracts.IRepositoryBase{`0}.Update(`0)
    name: Update
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Update__0_
  - name: (
  - name: T
  - name: )
- uid: Contracts.IRepositoryBase`1.Update(`0)
  commentId: M:Contracts.IRepositoryBase`1.Update(`0)
  href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Update__0_
  name: Update(T)
  nameWithType: IRepositoryBase<T>.Update(T)
  fullName: Contracts.IRepositoryBase<T>.Update(T)
  nameWithType.vb: IRepositoryBase(Of T).Update(T)
  fullName.vb: Contracts.IRepositoryBase(Of T).Update(T)
  spec.csharp:
  - uid: Contracts.IRepositoryBase`1.Update(`0)
    name: Update
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Update__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Contracts.IRepositoryBase`1.Update(`0)
    name: Update
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Update__0_
  - name: (
  - name: T
  - name: )
- uid: Repository.RepositoryBase`1.Delete*
  commentId: Overload:Repository.RepositoryBase`1.Delete
  href: Repository.RepositoryBase-1.html#Repository_RepositoryBase_1_Delete__0_
  name: Delete
  nameWithType: RepositoryBase<T>.Delete
  fullName: Repository.RepositoryBase<T>.Delete
  nameWithType.vb: RepositoryBase(Of T).Delete
  fullName.vb: Repository.RepositoryBase(Of T).Delete
- uid: Contracts.IRepositoryBase{{T}}.Delete({T})
  commentId: M:Contracts.IRepositoryBase{`0}.Delete(`0)
  parent: Contracts.IRepositoryBase{{T}}
  definition: Contracts.IRepositoryBase`1.Delete(`0)
  href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Delete__0_
  name: Delete(T)
  nameWithType: IRepositoryBase<T>.Delete(T)
  fullName: Contracts.IRepositoryBase<T>.Delete(T)
  nameWithType.vb: IRepositoryBase(Of T).Delete(T)
  fullName.vb: Contracts.IRepositoryBase(Of T).Delete(T)
  spec.csharp:
  - uid: Contracts.IRepositoryBase{`0}.Delete(`0)
    name: Delete
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Delete__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Contracts.IRepositoryBase{`0}.Delete(`0)
    name: Delete
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Delete__0_
  - name: (
  - name: T
  - name: )
- uid: Contracts.IRepositoryBase`1.Delete(`0)
  commentId: M:Contracts.IRepositoryBase`1.Delete(`0)
  href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Delete__0_
  name: Delete(T)
  nameWithType: IRepositoryBase<T>.Delete(T)
  fullName: Contracts.IRepositoryBase<T>.Delete(T)
  nameWithType.vb: IRepositoryBase(Of T).Delete(T)
  fullName.vb: Contracts.IRepositoryBase(Of T).Delete(T)
  spec.csharp:
  - uid: Contracts.IRepositoryBase`1.Delete(`0)
    name: Delete
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Delete__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Contracts.IRepositoryBase`1.Delete(`0)
    name: Delete
    href: Contracts.IRepositoryBase-1.html#Contracts_IRepositoryBase_1_Delete__0_
  - name: (
  - name: T
  - name: )
