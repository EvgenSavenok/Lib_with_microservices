{
  "api/BooksManagementService.Controllers.BooksController.html": {
    "href": "api/BooksManagementService.Controllers.BooksController.html",
    "title": "Class BooksController | Docs",
    "keywords": "Class BooksController Namespace BooksManagementService.Controllers Assembly BooksManagementService.dll Controller for managing books. Provides API endpoints for performing CRUD operations and rendering book-related views. [Route(\"api/books\")] [ApiController] public class BooksController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller BooksController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BooksController(IRepositoryManager, IMapper) Initializes a new instance of the BooksController class. public BooksController(IRepositoryManager repository, IMapper mapper) Parameters repository IRepositoryManager Repository manager for handling database operations. mapper IMapper AutoMapper instance for transforming models. Methods BooksPageAdmin() Returns the admin page for managing books. [HttpGet(\"admin\")] public IActionResult BooksPageAdmin() Returns IActionResult The admin page view. CreateBook() Renders the page for creating a new book. [HttpGet(\"AddBook\")] public Task<IActionResult> CreateBook() Returns Task<IActionResult> The create book page view. CreateBook(BookForCreationDto) Adds a new book to the database. [HttpPost(\"add\")] public Task<IActionResult> CreateBook(BookForCreationDto book) Parameters book BookForCreationDto The data for the book to create. Returns Task<IActionResult> Status 200 if created successfully; otherwise, an error response. DeleteBook(int) Deletes a book by its ID. [HttpDelete(\"delete/{id}\")] public Task<IActionResult> DeleteBook(int id) Parameters id int The ID of the book to delete. Returns Task<IActionResult> Status 204 if successfully deleted; otherwise, an error response. EditBook(int) Renders the book editing page for a specific book. [HttpGet(\"edit/{id}\", Name = \"EditBook\")] public Task<IActionResult> EditBook(int id) Parameters id int The ID of the book to edit. Returns Task<IActionResult> The edit book page view or a 404 status if not found. GetBook(int) Retrieves a single book by its ID. [HttpGet(\"{id}\", Name = \"BookById\")] public Task<IActionResult> GetBook(int id) Parameters id int The ID of the book. Returns Task<IActionResult> The requested book's details or a 404 status if not found. GetBook(string) Retrieves a book by its ISBN. [HttpGet(\"ByISBN/{ISBN}\", Name = \"BookByIsbn\")] public Task<IActionResult> GetBook(string ISBN) Parameters ISBN string The ISBN of the book. Returns Task<IActionResult> The book details or a 404 status if not found. GetBooks(BookParameters) Retrieves a paginated list of books based on query parameters. [HttpGet(\"GetBooks\")] public Task<IActionResult> GetBooks(BookParameters requestParameters) Parameters requestParameters BookParameters Request parameters including filters and pagination options. Returns Task<IActionResult> A paginated list of books with metadata about total pages and current page. GetBooksCount(BookParameters) Retrieves the total count of books based on query parameters. [HttpGet(\"GetBooksCount\")] public Task<IActionResult> GetBooksCount(BookParameters requestParameters) Parameters requestParameters BookParameters Request parameters including filters and pagination options. Returns Task<IActionResult> The total count of books as an integer. UpdateBook(int, BookForUpdateDto) Updates a book's details. [HttpPut(\"{id}\", Name = \"UpdateBook\")] public Task<IActionResult> UpdateBook(int id, BookForUpdateDto bookDto) Parameters id int The ID of the book to update. bookDto BookForUpdateDto The updated book details. Returns Task<IActionResult> Status 204 if successfully updated; otherwise, an error response."
  },
  "api/BooksManagementService.Controllers.html": {
    "href": "api/BooksManagementService.Controllers.html",
    "title": "Namespace BooksManagementService.Controllers | Docs",
    "keywords": "Namespace BooksManagementService.Controllers Classes BooksController Controller for managing books. Provides API endpoints for performing CRUD operations and rendering book-related views."
  },
  "api/BooksManagementService.DataTransferObjects.BookDto.html": {
    "href": "api/BooksManagementService.DataTransferObjects.BookDto.html",
    "title": "Class BookDto | Docs",
    "keywords": "Class BookDto Namespace BooksManagementService.DataTransferObjects Assembly BooksManagementService.dll public class BookDto Inheritance object BookDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Amount public int Amount { get; set; } Property Value int AuthorLastName public string AuthorLastName { get; set; } Property Value string AuthorName public string AuthorName { get; set; } Property Value string BookTitle public string BookTitle { get; set; } Property Value string Description public string Description { get; set; } Property Value string Genre public BookGenre Genre { get; set; } Property Value BookGenre ISBN public string ISBN { get; set; } Property Value string Id public int Id { get; set; } Property Value int"
  },
  "api/BooksManagementService.DataTransferObjects.BookForCreationDto.html": {
    "href": "api/BooksManagementService.DataTransferObjects.BookForCreationDto.html",
    "title": "Class BookForCreationDto | Docs",
    "keywords": "Class BookForCreationDto Namespace BooksManagementService.DataTransferObjects Assembly BooksManagementService.dll public class BookForCreationDto Inheritance object BookForCreationDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Amount public int Amount { get; set; } Property Value int AuthorLastName public string? AuthorLastName { get; set; } Property Value string AuthorName public string? AuthorName { get; set; } Property Value string BookTitle public string BookTitle { get; set; } Property Value string Description public string? Description { get; set; } Property Value string Genre public BookGenre Genre { get; set; } Property Value BookGenre ISBN public string ISBN { get; set; } Property Value string"
  },
  "api/BooksManagementService.DataTransferObjects.BookForUpdateDto.html": {
    "href": "api/BooksManagementService.DataTransferObjects.BookForUpdateDto.html",
    "title": "Class BookForUpdateDto | Docs",
    "keywords": "Class BookForUpdateDto Namespace BooksManagementService.DataTransferObjects Assembly BooksManagementService.dll public class BookForUpdateDto Inheritance object BookForUpdateDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Amount public int Amount { get; set; } Property Value int AuthorLastName public string AuthorLastName { get; set; } Property Value string AuthorName public string AuthorName { get; set; } Property Value string BookTitle public string BookTitle { get; set; } Property Value string Description public string Description { get; set; } Property Value string Genre public BookGenre Genre { get; set; } Property Value BookGenre ISBN public string ISBN { get; set; } Property Value string"
  },
  "api/BooksManagementService.DataTransferObjects.html": {
    "href": "api/BooksManagementService.DataTransferObjects.html",
    "title": "Namespace BooksManagementService.DataTransferObjects | Docs",
    "keywords": "Namespace BooksManagementService.DataTransferObjects Classes BookDto BookForCreationDto BookForUpdateDto"
  },
  "api/BooksManagementService.Extensions.ServiceExtensions.html": {
    "href": "api/BooksManagementService.Extensions.ServiceExtensions.html",
    "title": "Class ServiceExtensions | Docs",
    "keywords": "Class ServiceExtensions Namespace BooksManagementService.Extensions Assembly BooksManagementService.dll public static class ServiceExtensions Inheritance object ServiceExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureRepositoryManager(IServiceCollection) public static void ConfigureRepositoryManager(this IServiceCollection services) Parameters services IServiceCollection ConfigureSqlContext(IServiceCollection, IConfiguration) public static void ConfigureSqlContext(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration"
  },
  "api/BooksManagementService.Extensions.html": {
    "href": "api/BooksManagementService.Extensions.html",
    "title": "Namespace BooksManagementService.Extensions | Docs",
    "keywords": "Namespace BooksManagementService.Extensions Classes ServiceExtensions"
  },
  "api/BooksManagementService.Mapping.html": {
    "href": "api/BooksManagementService.Mapping.html",
    "title": "Class Mapping | Docs",
    "keywords": "Class Mapping Namespace BooksManagementService Assembly BooksManagementService.dll public class Mapping : Profile, IProfileExpression, IProfileConfiguration Inheritance object Profile Mapping Implements IProfileExpression IProfileConfiguration Inherited Members Profile.DisableConstructorMapping() Profile.CreateProjection<TSource, TDestination>() Profile.CreateProjection<TSource, TDestination>(MemberList) Profile.CreateMap<TSource, TDestination>() Profile.CreateMap<TSource, TDestination>(MemberList) Profile.CreateMap(Type, Type) Profile.CreateMap(Type, Type, MemberList) Profile.ClearPrefixes() Profile.ReplaceMemberName(string, string) Profile.RecognizePrefixes(params string[]) Profile.RecognizePostfixes(params string[]) Profile.RecognizeDestinationPrefixes(params string[]) Profile.RecognizeDestinationPostfixes(params string[]) Profile.AddGlobalIgnore(string) Profile.IncludeSourceExtensionMethods(Type) Profile.ProfileName Profile.AllowNullDestinationValues Profile.AllowNullCollections Profile.ShouldMapProperty Profile.ShouldMapField Profile.ShouldMapMethod Profile.ShouldUseConstructor Profile.SourceMemberNamingConvention Profile.DestinationMemberNamingConvention Profile.ValueTransformers object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Mapping() public Mapping()"
  },
  "api/BooksManagementService.Migrations.InitialCreate1.html": {
    "href": "api/BooksManagementService.Migrations.InitialCreate1.html",
    "title": "Class InitialCreate1 | Docs",
    "keywords": "Class InitialCreate1 Namespace BooksManagementService.Migrations Assembly BooksManagementService.dll A base class inherited by each EF Core migration. [DbContext(typeof(ApplicationContext))] [Migration(\"20241026154509_InitialCreate1\")] public class InitialCreate1 : Migration Inheritance object Migration InitialCreate1 Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/BooksManagementService.Migrations.html": {
    "href": "api/BooksManagementService.Migrations.html",
    "title": "Namespace BooksManagementService.Migrations | Docs",
    "keywords": "Namespace BooksManagementService.Migrations Classes InitialCreate1 A base class inherited by each EF Core migration."
  },
  "api/BooksManagementService.Models.Book.html": {
    "href": "api/BooksManagementService.Models.Book.html",
    "title": "Class Book | Docs",
    "keywords": "Class Book Namespace BooksManagementService.Models Assembly BooksManagementService.dll public class Book Inheritance object Book Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Amount [Required(ErrorMessage = \"Author ID is a required field.\")] public int Amount { get; set; } Property Value int AuthorLastName [Required(ErrorMessage = \"Author last name is a required field.\")] public string AuthorLastName { get; set; } Property Value string AuthorName [Required(ErrorMessage = \"Author name is a required field.\")] public string AuthorName { get; set; } Property Value string BookTitle [Required(ErrorMessage = \"Book title is a required field.\")] [MaxLength(30, ErrorMessage = \"Maximum length for the title is 30 characters.\")] public string BookTitle { get; set; } Property Value string Description [Required(ErrorMessage = \"Description is a required field.\")] public string Description { get; set; } Property Value string Genre [Required(ErrorMessage = \"Book genre is a required field.\")] public BookGenre Genre { get; set; } Property Value BookGenre ISBN [Required(ErrorMessage = \"Book title is a required field.\")] [MaxLength(13, ErrorMessage = \"Maximum length for the title is 13 characters.\")] [MinLength(10, ErrorMessage = \"Minimum length for the title is 10 characters.\")] public string ISBN { get; set; } Property Value string Id [Column(\"BookId\")] public int Id { get; set; } Property Value int"
  },
  "api/BooksManagementService.Models.BookGenre.html": {
    "href": "api/BooksManagementService.Models.BookGenre.html",
    "title": "Enum BookGenre | Docs",
    "keywords": "Enum BookGenre Namespace BooksManagementService.Models Assembly BooksManagementService.dll public enum BookGenre Fields Adventures = 1 All = 0 FairyTales = 4 Horrors = 3 LoveStories = 2"
  },
  "api/BooksManagementService.Models.html": {
    "href": "api/BooksManagementService.Models.html",
    "title": "Namespace BooksManagementService.Models | Docs",
    "keywords": "Namespace BooksManagementService.Models Classes Book Enums BookGenre"
  },
  "api/BooksManagementService.RabbitMq.RabbitMqListener.html": {
    "href": "api/BooksManagementService.RabbitMq.RabbitMqListener.html",
    "title": "Class RabbitMqListener | Docs",
    "keywords": "Class RabbitMqListener Namespace BooksManagementService.RabbitMq Assembly BooksManagementService.dll public class RabbitMqListener : BackgroundService, IHostedService, IDisposable Inheritance object BackgroundService RabbitMqListener Implements IHostedService IDisposable Inherited Members BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RabbitMqListener(IConfiguration) public RabbitMqListener(IConfiguration configuration) Parameters configuration IConfiguration Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() ExecuteAsync(CancellationToken) This method is called when the IHostedService starts. The implementation should return a task that represents the lifetime of the long running operation(s) being performed. protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Triggered when StopAsync(CancellationToken) is called. Returns Task A Task that represents the long running operations. Remarks See Worker Services in .NET for implementation guidelines."
  },
  "api/BooksManagementService.RabbitMq.html": {
    "href": "api/BooksManagementService.RabbitMq.html",
    "title": "Namespace BooksManagementService.RabbitMq | Docs",
    "keywords": "Namespace BooksManagementService.RabbitMq Classes RabbitMqListener"
  },
  "api/BooksManagementService.html": {
    "href": "api/BooksManagementService.html",
    "title": "Namespace BooksManagementService | Docs",
    "keywords": "Namespace BooksManagementService Classes Mapping"
  },
  "api/Contracts.IBookRepository.html": {
    "href": "api/Contracts.IBookRepository.html",
    "title": "Interface IBookRepository | Docs",
    "keywords": "Interface IBookRepository Namespace Contracts Assembly BooksManagementService.dll public interface IBookRepository Methods CountBooksAsync(BookParameters) Task<int> CountBooksAsync(BookParameters requestParameters) Parameters requestParameters BookParameters Returns Task<int> CreateBook(Book) void CreateBook(Book book) Parameters book Book DeleteBook(Book) void DeleteBook(Book book) Parameters book Book GetAllBooksAsync(BookParameters, bool) Task<IEnumerable<Book>> GetAllBooksAsync(BookParameters bookParameters, bool trackChanges) Parameters bookParameters BookParameters trackChanges bool Returns Task<IEnumerable<Book>> GetBookAsync(int, bool) Task<Book> GetBookAsync(int bookId, bool trackChanges) Parameters bookId int trackChanges bool Returns Task<Book> GetBookByISBNAsync(string, bool) Task<Book> GetBookByISBNAsync(string bookIsbn, bool trackChanges) Parameters bookIsbn string trackChanges bool Returns Task<Book>"
  },
  "api/Contracts.IRepositoryBase-1.html": {
    "href": "api/Contracts.IRepositoryBase-1.html",
    "title": "Interface IRepositoryBase<T> | Docs",
    "keywords": "Interface IRepositoryBase<T> Namespace Contracts Assembly BooksManagementService.dll public interface IRepositoryBase<T> Type Parameters T Methods Create(T) void Create(T entity) Parameters entity T Delete(T) void Delete(T entity) Parameters entity T FindAll(bool) IQueryable<T> FindAll(bool trackChanges) Parameters trackChanges bool Returns IQueryable<T> FindByCondition(Expression<Func<T, bool>>, bool) IQueryable<T> FindByCondition(Expression<Func<T, bool>> expression, bool trackChanges) Parameters expression Expression<Func<T, bool>> trackChanges bool Returns IQueryable<T> Update(T) void Update(T entity) Parameters entity T"
  },
  "api/Contracts.IRepositoryManager.html": {
    "href": "api/Contracts.IRepositoryManager.html",
    "title": "Interface IRepositoryManager | Docs",
    "keywords": "Interface IRepositoryManager Namespace Contracts Assembly BooksManagementService.dll public interface IRepositoryManager Properties Book IBookRepository Book { get; } Property Value IBookRepository Methods SaveAsync() Task SaveAsync() Returns Task"
  },
  "api/Contracts.html": {
    "href": "api/Contracts.html",
    "title": "Namespace Contracts | Docs",
    "keywords": "Namespace Contracts Interfaces IBookRepository IRepositoryBase<T> IRepositoryManager"
  },
  "api/Entities.ApplicationContext.html": {
    "href": "api/Entities.ApplicationContext.html",
    "title": "Class ApplicationContext | Docs",
    "keywords": "Class ApplicationContext Namespace Entities Assembly BooksManagementService.dll public class ApplicationContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext ApplicationContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationContext(DbContextOptions<ApplicationContext>) public ApplicationContext(DbContextOptions<ApplicationContext> options) Parameters options DbContextOptions<ApplicationContext> Properties Books public DbSet<Book> Books { get; set; } Property Value DbSet<Book> Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/Entities.Configuration.BookConfiguration.html": {
    "href": "api/Entities.Configuration.BookConfiguration.html",
    "title": "Class BookConfiguration | Docs",
    "keywords": "Class BookConfiguration Namespace Entities.Configuration Assembly BooksManagementService.dll public class BookConfiguration : IEntityTypeConfiguration<Book> Inheritance object BookConfiguration Implements IEntityTypeConfiguration<Book> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<Book>) Configures the entity of type Book. public void Configure(EntityTypeBuilder<Book> builder) Parameters builder EntityTypeBuilder<Book> The builder to be used to configure the entity type."
  },
  "api/Entities.Configuration.html": {
    "href": "api/Entities.Configuration.html",
    "title": "Namespace Entities.Configuration | Docs",
    "keywords": "Namespace Entities.Configuration Classes BookConfiguration"
  },
  "api/Entities.ErrorModel.ErrorDetails.html": {
    "href": "api/Entities.ErrorModel.ErrorDetails.html",
    "title": "Class ErrorDetails | Docs",
    "keywords": "Class ErrorDetails Namespace Entities.ErrorModel Assembly BooksManagementService.dll public class ErrorDetails Inheritance object ErrorDetails Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Message public string Message { get; set; } Property Value string StatusCode public int StatusCode { get; set; } Property Value int Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Entities.ErrorModel.html": {
    "href": "api/Entities.ErrorModel.html",
    "title": "Namespace Entities.ErrorModel | Docs",
    "keywords": "Namespace Entities.ErrorModel Classes ErrorDetails"
  },
  "api/Entities.RequestFeatures.BookParameters.html": {
    "href": "api/Entities.RequestFeatures.BookParameters.html",
    "title": "Class BookParameters | Docs",
    "keywords": "Class BookParameters Namespace Entities.RequestFeatures Assembly BooksManagementService.dll public class BookParameters : RequestParameters Inheritance object RequestParameters BookParameters Inherited Members RequestParameters.PageNumber RequestParameters.PageSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Genre public BookGenre Genre { get; set; } Property Value BookGenre SearchTerm public string? SearchTerm { get; set; } Property Value string"
  },
  "api/Entities.RequestFeatures.RequestParameters.html": {
    "href": "api/Entities.RequestFeatures.RequestParameters.html",
    "title": "Class RequestParameters | Docs",
    "keywords": "Class RequestParameters Namespace Entities.RequestFeatures Assembly BooksManagementService.dll public abstract class RequestParameters Inheritance object RequestParameters Derived BookParameters Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PageNumber public int PageNumber { get; set; } Property Value int PageSize public int PageSize { get; set; } Property Value int"
  },
  "api/Entities.RequestFeatures.html": {
    "href": "api/Entities.RequestFeatures.html",
    "title": "Namespace Entities.RequestFeatures | Docs",
    "keywords": "Namespace Entities.RequestFeatures Classes BookParameters RequestParameters"
  },
  "api/Entities.html": {
    "href": "api/Entities.html",
    "title": "Namespace Entities | Docs",
    "keywords": "Namespace Entities Classes ApplicationContext"
  },
  "api/Library_Web_Application.Extensions.ExceptionMiddlewareExtensions.html": {
    "href": "api/Library_Web_Application.Extensions.ExceptionMiddlewareExtensions.html",
    "title": "Class ExceptionMiddlewareExtensions | Docs",
    "keywords": "Class ExceptionMiddlewareExtensions Namespace Library_Web_Application.Extensions Assembly BooksManagementService.dll public static class ExceptionMiddlewareExtensions Inheritance object ExceptionMiddlewareExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureExceptionHandler(IApplicationBuilder) public static void ConfigureExceptionHandler(this IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/Library_Web_Application.Extensions.html": {
    "href": "api/Library_Web_Application.Extensions.html",
    "title": "Namespace Library_Web_Application.Extensions | Docs",
    "keywords": "Namespace Library_Web_Application.Extensions Classes ExceptionMiddlewareExtensions"
  },
  "api/Repository.BookRepository.html": {
    "href": "api/Repository.BookRepository.html",
    "title": "Class BookRepository | Docs",
    "keywords": "Class BookRepository Namespace Repository Assembly BooksManagementService.dll public class BookRepository : RepositoryBase<Book>, IRepositoryBase<Book>, IBookRepository Inheritance object RepositoryBase<Book> BookRepository Implements IRepositoryBase<Book> IBookRepository Inherited Members RepositoryBase<Book>.RepositoryContext RepositoryBase<Book>.FindAll(bool) RepositoryBase<Book>.FindByCondition(Expression<Func<Book, bool>>, bool) RepositoryBase<Book>.Create(Book) RepositoryBase<Book>.Update(Book) RepositoryBase<Book>.Delete(Book) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BookRepository(ApplicationContext) public BookRepository(ApplicationContext repositoryContext) Parameters repositoryContext ApplicationContext Methods CountBooksAsync(BookParameters) public Task<int> CountBooksAsync(BookParameters bookParameters) Parameters bookParameters BookParameters Returns Task<int> CreateBook(Book) public void CreateBook(Book book) Parameters book Book DeleteBook(Book) public void DeleteBook(Book book) Parameters book Book GetAllBooksAsync(BookParameters, bool) public Task<IEnumerable<Book>> GetAllBooksAsync(BookParameters bookParameters, bool trackChanges) Parameters bookParameters BookParameters trackChanges bool Returns Task<IEnumerable<Book>> GetBookAsync(int, bool) public Task<Book> GetBookAsync(int bookId, bool trackChanges) Parameters bookId int trackChanges bool Returns Task<Book> GetBookByISBNAsync(string, bool) public Task<Book> GetBookByISBNAsync(string ISBN, bool trackChanges) Parameters ISBN string trackChanges bool Returns Task<Book>"
  },
  "api/Repository.Extensions.RepositoryBookExtensions.html": {
    "href": "api/Repository.Extensions.RepositoryBookExtensions.html",
    "title": "Class RepositoryBookExtensions | Docs",
    "keywords": "Class RepositoryBookExtensions Namespace Repository.Extensions Assembly BooksManagementService.dll public static class RepositoryBookExtensions Inheritance object RepositoryBookExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Search(IQueryable<Book>, string) public static IQueryable<Book> Search(this IQueryable<Book> books, string searchTerm) Parameters books IQueryable<Book> searchTerm string Returns IQueryable<Book>"
  },
  "api/Repository.Extensions.html": {
    "href": "api/Repository.Extensions.html",
    "title": "Namespace Repository.Extensions | Docs",
    "keywords": "Namespace Repository.Extensions Classes RepositoryBookExtensions"
  },
  "api/Repository.RepositoryBase-1.html": {
    "href": "api/Repository.RepositoryBase-1.html",
    "title": "Class RepositoryBase<T> | Docs",
    "keywords": "Class RepositoryBase<T> Namespace Repository Assembly BooksManagementService.dll public abstract class RepositoryBase<T> : IRepositoryBase<T> where T : class Type Parameters T Inheritance object RepositoryBase<T> Implements IRepositoryBase<T> Derived BookRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RepositoryBase(ApplicationContext) public RepositoryBase(ApplicationContext repositoryContext) Parameters repositoryContext ApplicationContext Fields RepositoryContext protected ApplicationContext RepositoryContext Field Value ApplicationContext Methods Create(T) public void Create(T entity) Parameters entity T Delete(T) public void Delete(T entity) Parameters entity T FindAll(bool) public IQueryable<T> FindAll(bool trackChanges) Parameters trackChanges bool Returns IQueryable<T> FindByCondition(Expression<Func<T, bool>>, bool) public IQueryable<T> FindByCondition(Expression<Func<T, bool>> expression, bool trackChanges) Parameters expression Expression<Func<T, bool>> trackChanges bool Returns IQueryable<T> Update(T) public void Update(T entity) Parameters entity T"
  },
  "api/Repository.RepositoryManager.html": {
    "href": "api/Repository.RepositoryManager.html",
    "title": "Class RepositoryManager | Docs",
    "keywords": "Class RepositoryManager Namespace Repository Assembly BooksManagementService.dll public class RepositoryManager : IRepositoryManager Inheritance object RepositoryManager Implements IRepositoryManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RepositoryManager(ApplicationContext) public RepositoryManager(ApplicationContext repositoryContext) Parameters repositoryContext ApplicationContext Properties Book public IBookRepository Book { get; } Property Value IBookRepository Methods SaveAsync() public Task SaveAsync() Returns Task"
  },
  "api/Repository.html": {
    "href": "api/Repository.html",
    "title": "Namespace Repository | Docs",
    "keywords": "Namespace Repository Classes BookRepository RepositoryBase<T> RepositoryManager"
  }
}